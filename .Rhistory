table(data_fr$country_code)
data_fr$country_code <- droplevels(data_fr$country_code)
table(data_fr$country_code)
data_fr$city <- droplevels(data_fr$city)
data_fr %>%
count(first_opened_year, city)
nrow(data_fr) # 11671
data_fr %>%
filter(!is.na(closed_date)) %>%
nrow() # 2411
data_fr %>%
filter(open_status=="OPEN") %>%
count(city)
data_fr %>%
count(city)
data_gg1 <- data_fr %>%
filter(open_status=="OPEN") %>%
count(city, accomodation_type)
windowsFonts(
A=windowsFont("Arial Black"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
gg1 <- ggplot(data = data_gg1, aes(x = city, y = n, fill = accomodation_type))
gg1 + geom_bar(stat = "identity") +
labs(title="N. of French properties opened across 2013-2016, still opened as of 30 Apr. 2017",
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
gg1 + geom_bar(stat = "identity") +
labs(title=paste("N. of French properties opened across 2013-2016,", "/n", "still opened as of 2018-05-27"),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
gg1 + geom_bar(stat = "identity") +
labs(expression(paste("N. of French properties opened across 2013-2016,", "\n", "still opened as of 2018-05-27")),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
gg1 + geom_bar(stat = "identity") +
labs(title = expression(paste("N. of French properties opened across 2013-2016,", "\n", "still opened as of 2018-05-27")),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
gg1 + geom_bar(stat = "identity") +
labs(title = expression(paste("N. of French properties opened across 2013-2016, \n still opened as of 2018-05-27")),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
gg1 + geom_bar(stat = "identity") +
labs(title = expression(paste("N. of French properties opened across 2013-2016, \n still opened as of 2018-05-27")),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=1, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
gg1 + geom_bar(stat = "identity") +
labs(title = expression(paste("N. of French properties opened across 2013-2016, \n still opened as of 2018-05-27")),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=-2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
gg1 + geom_bar(stat = "identity") +
labs(title = expression(paste("N. of French properties opened across 2013-2016, \n still opened as of 2018-05-27")),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=-4, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
gg1 + geom_bar(stat = "identity") +
labs(title = expression(paste("N. of French properties opened across 2013-2016, \n still opened as of 2018-05-27")),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=-4, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, angle = 45, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
rm(list = ls()); gc()
## --- Simulate hotel data
set.seed(123)
n <- 20000
# 1. hotel_id
hotel_id <- as.integer(10000001:10020000)
# 2. country_code
country_code <- as.factor(sample(x = c("fr", "it"), size = n, replace = TRUE))
# 3. city
country_code == "fr"
# 3. city
idx_fr <- country_code == "fr"
idx_it <- country_code == "it"
city <- rep("na", n)
city[idx_fr] <- as.factor(sample(x = c("Cannes", "Chamonix", "Nice", "Paris", "Tignes"), size = sum(idx_fr), replace = TRUE))
city[idx_it] <- as.factor(sample(x = c("Milan", "Rome", "Salerno", "Sorrento"), size = sum(idx_it), replace = TRUE))
# 4. first_opened_date
first_opened_date <- sample(x = seq(as.Date("2013-01-01"), as.Date("2016-12-31"), by="day"), size = n, replace = TRUE)
# 5. closed_date
closed_date1 <- first_opened_date + sapply(rnorm(n, 200, 150), function(i) round(max(0,i),0))
closed_date <- as.Date(ifelse(closed_date1>as.Date("2018-05-27"), as.Date("2018-05-27"), closed_date1), origin="1970-01-01") # cap closed_date by date of analysis
idx_open <- as.integer(sample(x = 1:n, size = 0.65*n, replace = FALSE))
closed_date[idx_open] <- NA
# 6. avg_rate_per_night_euro
idx_cheap <- as.integer(sample(x = 1:n, size = n/2, replace = FALSE))
idx_expensive <- !((1:n) %in% idx_cheap)
avg_rate_per_night_euro <- rep(0,n)
avg_rate_per_night_euro[idx_cheap] <- sapply(rnorm(n/2, 60, 20), function(i) round(max(10,i),0))
avg_rate_per_night_euro[idx_expensive] <- sapply(rnorm(n/2, 200, 50), function(i) round(max(100,i),0))
# 7. open status
open_status <- as.factor(ifelse(is.na(closed_date), "OPEN", "CLOSED"))
# 8. nr_rooms
nr_rooms <- as.integer(sapply(rgamma(n = 1000, shape = 0.5, rate = 0.01), function(i) round(max(1, i),0)))
# 9. accomodation_type
accomodation_type <- as.factor(sample(x = c("Apartment", "Bed and Breakfast", "Hotel", "Resort", "Villa"), size = n, replace = TRUE))
# 10. quality_score
quality_score <- as.integer(sample(x = 3:10, size = n, replace = TRUE))
# 11. cancellation_policy
cancellation_policy <- as.factor(sample(x = c("FLEXIBLE", "NON-REFUNDABLE", "STRICT"), size = n, replace = TRUE))
# 12. payment_method
payment_method <- as.factor(sample(x = c("bc", "ca", "ca,bt", "cc, ca, bt", "cc,bt", "cc,ca", "cc,ca,bt,bc"), size = n, replace = TRUE))
# 13. preferred_contact_method
preferred_contact_method <- as.factor(sample(x = c("email", "phone", "sms"), size = n, replace = TRUE))
data <- data.frame(hotel_id = hotel_id, country_code = country_code, city = city,
first_opened_date = first_opened_date, closed_date = closed_date,
avg_rate_per_night_euro = avg_rate_per_night_euro, open_status = open_status,
nr_rooms = nr_rooms, accomodation_type = accomodation_type,
quality_score = quality_score, cancellation_policy = cancellation_policy,
payment_method = payment_method, preferred_contact_method = preferred_contact_method)
str(data)
table(data$country_code, data$city)
city <- rep("na", n)
city[idx_fr] <- as.factor(sample(x = c("Cannes", "Chamonix", "Nice", "Paris", "Tignes"), size = sum(idx_fr), replace = TRUE))
city
as.factor(sample(x = c("Cannes", "Chamonix", "Nice", "Paris", "Tignes"), size = sum(idx_fr), replace = TRUE))
city[idx_fr] <- sample(x = c("Cannes", "Chamonix", "Nice", "Paris", "Tignes"), size = sum(idx_fr), replace = TRUE)
city
city[idx_it] <- sample(x = c("Milan", "Rome", "Salerno", "Sorrento"), size = sum(idx_it), replace = TRUE)
city <- as.factor(city)
rm(list = ls()); gc()
## --- Simulate hotel data
set.seed(123)
n <- 20000
# 1. hotel_id
hotel_id <- as.integer(10000001:10020000)
# 2. country_code
country_code <- as.factor(sample(x = c("fr", "it"), size = n, replace = TRUE))
# 3. city
idx_fr <- country_code == "fr"
idx_it <- country_code == "it"
city <- rep("na", n)
city[idx_fr] <- sample(x = c("Cannes", "Chamonix", "Nice", "Paris", "Tignes"), size = sum(idx_fr), replace = TRUE)
city[idx_it] <- sample(x = c("Milan", "Rome", "Salerno", "Sorrento"), size = sum(idx_it), replace = TRUE)
city <- as.factor(city)
# 4. first_opened_date
first_opened_date <- sample(x = seq(as.Date("2013-01-01"), as.Date("2016-12-31"), by="day"), size = n, replace = TRUE)
# 5. closed_date
closed_date1 <- first_opened_date + sapply(rnorm(n, 200, 150), function(i) round(max(0,i),0))
closed_date <- as.Date(ifelse(closed_date1>as.Date("2018-05-27"), as.Date("2018-05-27"), closed_date1), origin="1970-01-01") # cap closed_date by date of analysis
idx_open <- as.integer(sample(x = 1:n, size = 0.65*n, replace = FALSE))
closed_date[idx_open] <- NA
# 6. avg_rate_per_night_euro
idx_cheap <- as.integer(sample(x = 1:n, size = n/2, replace = FALSE))
idx_expensive <- !((1:n) %in% idx_cheap)
avg_rate_per_night_euro <- rep(0,n)
avg_rate_per_night_euro[idx_cheap] <- sapply(rnorm(n/2, 60, 20), function(i) round(max(10,i),0))
avg_rate_per_night_euro[idx_expensive] <- sapply(rnorm(n/2, 200, 50), function(i) round(max(100,i),0))
# 7. open status
open_status <- as.factor(ifelse(is.na(closed_date), "OPEN", "CLOSED"))
# 8. nr_rooms
nr_rooms <- as.integer(sapply(rgamma(n = 1000, shape = 0.5, rate = 0.01), function(i) round(max(1, i),0)))
# 9. accomodation_type
accomodation_type <- as.factor(sample(x = c("Apartment", "Bed and Breakfast", "Hotel", "Resort", "Villa"), size = n, replace = TRUE))
# 10. quality_score
quality_score <- as.integer(sample(x = 3:10, size = n, replace = TRUE))
# 11. cancellation_policy
cancellation_policy <- as.factor(sample(x = c("FLEXIBLE", "NON-REFUNDABLE", "STRICT"), size = n, replace = TRUE))
# 12. payment_method
payment_method <- as.factor(sample(x = c("bc", "ca", "ca,bt", "cc, ca, bt", "cc,bt", "cc,ca", "cc,ca,bt,bc"), size = n, replace = TRUE))
# 13. preferred_contact_method
preferred_contact_method <- as.factor(sample(x = c("email", "phone", "sms"), size = n, replace = TRUE))
data <- data.frame(hotel_id = hotel_id, country_code = country_code, city = city,
first_opened_date = first_opened_date, closed_date = closed_date,
avg_rate_per_night_euro = avg_rate_per_night_euro, open_status = open_status,
nr_rooms = nr_rooms, accomodation_type = accomodation_type,
quality_score = quality_score, cancellation_policy = cancellation_policy,
payment_method = payment_method, preferred_contact_method = preferred_contact_method)
str(data)
head(data)
table(data$country_code, data$city)
# save workspace
rm(list=setdiff(ls(), "data"))
save.image("data/data.RData")
rm(list = ls()); gc()
load("data/data.RData")
# ---------------------------------------
# Libraries
# --------------------------------------
library(dplyr)
library(ggplot2)
library(lubridate)
library(data.table)
library(TTR)
library(effects)
library(caret)
# --------------------------------
# cleaning data & trasnforming data
# ---------------------------------
summary(data)
# hotel_id is a key for data?
nrow(data)==length(unique(data$hotel_id))
# calculate other variables
data$first_opened_year <- strftime(data$first_opened_date, "%Y")
data$first_opened_yearmonth <- strftime(data$first_opened_date, "%Y%m")
table(data$first_opened_yearmonth)
data$closed_yearmonth <- strftime(data$closed_date, "%Y%m")
# ----------------------------------------
# Dataset France
# ----------------------------------------
data_fr <- data %>%
filter(country_code=="fr")
# drop unused levels
table(data_fr$country_code)
data_fr$country_code <- droplevels(data_fr$country_code)
table(data_fr$country_code)
data_fr$city <- droplevels(data_fr$city)
# ----------------------------------------
# Overview France
# ----------------------------------------
data_fr %>%
count(first_opened_year, city)
nrow(data_fr)
data_fr %>%
filter(!is.na(closed_date)) %>%
nrow()
data_fr %>%
filter(open_status=="OPEN") %>%
count(city)
data_fr %>%
count(city)
# ----------------------------------------
# Visualizing France
# ----------------------------------------
data_gg1 <- data_fr %>%
filter(open_status=="OPEN") %>%
count(city, accomodation_type)
windowsFonts(
A=windowsFont("Arial Black"),
B=windowsFont("Bookman Old Style"),
C=windowsFont("Comic Sans MS"),
D=windowsFont("Symbol")
)
gg1 <- ggplot(data = data_gg1, aes(x = city, y = n, fill = accomodation_type))
gg1 + geom_bar(stat = "identity") +
labs(title = expression(paste("N. of French properties opened across 2013-2016, \n still opened as of 2018-05-27")),
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=-4, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, angle = 45, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Accomodation Type"))
data_gg2 <- data_fr %>%
filter(open_status=="OPEN" & avg_rate_per_night_euro>0) %>%
count(city, avg_rate_per_night_euro)
warnings()
data_gg2 <- data_fr %>%
filter(open_status=="OPEN" & avg_rate_per_night_euro>0) %>%
count(city, avg_rate_per_night_euro)
gg2 <- ggplot(data_gg2, aes(x = avg_rate_per_night_euro, group = city, fill = city)) +
geom_density(alpha = .4) +
xlab("Average rate per night (???)") +
ylab("") +
ggtitle("Distribution of Average rate per night - by City") +
guides(fill=guide_legend("City")) +
#  scale_fill_discrete(labels = c("No*", "Si")) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white")
)
gg2
data_gg3 <- data_fr %>%
filter(open_status=="OPEN" & avg_rate_per_night_euro>0) %>%
count(city, avg_rate_per_night_euro, accomodation_type)
gg3 <-ggplot(data_gg3, aes(x = avg_rate_per_night_euro, group = city, fill = city)) +
geom_density(alpha = .4) +
facet_wrap( ~ accomodation_type, ncol = 2) +
xlab("Average rate per night (???)") +
ylab("") +
ggtitle("Distribution of Average rate per night - by City and Property type") +
guides(fill=guide_legend("City")) +
#  scale_fill_discrete(labels = c("No*", "Si")) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white")
)
gg3
data_gg4 <- data_fr %>%
filter(open_status=="OPEN") %>%
count(city, nr_rooms)
gg4 <-ggplot(data_gg4, aes(x = nr_rooms, group = city, fill = city)) +
geom_density(alpha = .4) +
xlab("Average rate per night (???)") +
ylab("") +
ggtitle("Distribution of Average rate per night - by City") +
guides(fill=guide_legend("City")) +
#  scale_fill_discrete(labels = c("No*", "Si")) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white")
)
gg4 <-ggplot(data_gg4, aes(x = nr_rooms, group = city, fill = city)) +
geom_density(alpha = .4) +
xlab("Average rate per night") +
ylab("") +
ggtitle("Distribution of Average rate per night - by City") +
guides(fill=guide_legend("City")) +
#  scale_fill_discrete(labels = c("No*", "Si")) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white")
)
gg4
data_gg5 <- data_fr %>%
filter(open_status=="OPEN") %>%
count(city, quality_score)
gg5 <- ggplot(data = data_gg5, aes(x = city, y = n, fill = quality_score))
gg5 + geom_bar(stat = "identity") +
labs(title="N. of French properties opened across 2013-2016, still opened as of 30 Apr. 2017",
x="", y="") +
#  scale_x_continuous(breaks=NA) +
theme(plot.title = element_text(hjust = 0, vjust=2, size = 14, family = "Times"),
axis.text.x = element_text(size = 12, family = "Times"),
axis.text.y = element_text(size = 12, family = "Times"),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey")
) +
guides(fill=guide_legend(title="Quality Score"))
data_g1 <- data_fr %>% count(city) %>% arrange(n)
g <- ggplot(data = data_g1, aes(x = reorder(city, -n)  , y = n))
g + geom_bar(stat = "identity") +
labs(title="Number of hotels in French cities",
x="City", y="") +
theme_minimal()
x2 <- data_fr %>% count(first_opened_yearmonth)
names(x2) <- c("period", "n_opened")
y2 <- data1_fr %>% count(closed_yearmonth2)
y2 <- data_fr %>% count(closed_yearmonth2)
x2 <- data_fr %>% count(first_opened_yearmonth)
names(x2) <- c("period", "n_opened")
y2 <- data_fr %>% count(closed_yearmonth)
names(y2) <- c("period", "n_closed")
z2 <- full_join(x2, y2, by = c("period"))
z2 <- z2 %>%
filter(!is.na(period))
cleanDataTable = function(DT) {
for (j in seq_len(ncol(DT)))
set(DT,which(is.na(DT[[j]])),j,0)
}
cleanDataTable(z2)
z2$opened <- cumsum(z2$n_opened)-cumsum(z2$n_closed)
z2_201612 <- z2 %>% filter(period<=201612)
z2_new <- z2_201612[,c("period", "n_opened", "n_closed")]
setDT(z2_new)
z2_Melted <- melt(z2_new,id=c("period"))
ggplot(z2_Melted) + geom_line(aes(x=period, y=value, colour=variable, group = variable)) +
ylab(label="") +
xlab("") +
scale_linetype(guide = guide_legend(override.aes = list(alpha = 1)), labels = c("N. opened", "N. closed")) +
theme_minimal() +
scale_colour_discrete(name = "", labels=c("N. openings","N. closings")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(breaks = c(201301, 201307, 201401, 201407, 201501, 201507, 201601, 201607, 201612))
x22 <- data_fr %>% count(first_opened_yearmonth, city)
names(x22) <- c("period", "city", "n_opened")
y22 <- data1_fr %>% count(closed_yearmonth, city)
names(y22) <- c("period", "city", "n_closed")
y22 <- data_fr %>% count(closed_yearmonth, city)
names(y22) <- c("period", "city", "n_closed")
z22 <- full_join(x22, y22, by = c("period", "city"))
z22 <- z22 %>%
filter(!is.na(period))
cleanDataTable = function(DT) {
for (j in seq_len(ncol(DT)))
set(DT,which(is.na(DT[[j]])),j,0)
}
cleanDataTable(z22)
z22$opened <- cumsum(z22$n_opened)-cumsum(z22$n_closed)
z22_201612 <- z22 %>% filter(period<=201612)
z22_new <- z22_201612[,c("period", "city", "n_opened", "n_closed")]
setDT(z22_new)
z22_Melted <- melt(z22_new,id=c("period", "city"))
ggplot(z22_Melted) + geom_line(aes(x=period, y=value, colour=variable, group = variable)) +
ylab(label="") +
xlab("") +
scale_linetype(guide = guide_legend(override.aes = list(alpha = 1)), labels = c("N. opened", "N. closed")) +
theme_minimal() +
scale_colour_discrete(name = "", labels=c("N. openings","N. closings")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(breaks = c(201301, 201307, 201401, 201407, 201501, 201507, 201601, 201607, 201612)) +
facet_wrap( ~ city, ncol = 2)
library(RColorBrewer)
CL2palette=rev(brewer.pal(n = 9, name = "RdYlBu"))
data_fr <- data_fr %>%
mutate(close = if_else(
!is.na(closed_date),
1,
0))
data_fr_mod <- data_fr %>%
select(-c(hotel_id, country_code, first_opened_date, closed_date, open_status,
first_opened_yearmonth, closed_yearmonth, first_opened_year)) %>%
filter(avg_rate_per_night_euro>0)
## --- Model 1
logistic <- glm(close ~. , data=data1_fr_mod, family=binomial)
## --- Model 1
logistic <- glm(close ~. , data=data_fr_mod, family=binomial)
summary(logistic)
plot(allEffects(logistic))
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
logit2prob(coefficients(logistic))
exp(coefficients(logistic))
data_fr$quality_score2 <- cut(data_fr$quality_score, c(0,3,6,9,10))
data_fr$avg_rate_per_night_euro2 <- cut(data_fr$avg_rate_per_night_euro, c(0,50,100,150,200,max(data_fr_mod$avg_rate_per_night_euro)))
levels(data_fr$avg_rate_per_night_euro2)
revalue(data_fr$avg_rate_per_night_euro2, c("(200,368]"="(200+)"))
library(plyr)
revalue(data_fr$avg_rate_per_night_euro2, c("(200,368]"="(200+)"))
data_fr$accomodation_type2 <-
with(data_fr,
ifelse(
accomodation_type=="Villa", 1,
ifelse(
accomodation_type=="Resort", 2,
ifelse(
accomodation_type=="Hotel", 3,
ifelse(
accomodation_type=="Bed and Breakfast", 4,
5)))))
data_fr %>%
group_by(accomodation_type) %>%
summarise(
closed = sum(!is.na(closed_date)),
n = sum(!is.na(hotel_id))) %>%
mutate(closed_rate = closed/n)
# avg_rate_per_night_euro2
data_fr %>%
group_by(avg_rate_per_night_euro2) %>%
summarise(
closed = sum(!is.na(closed_date)),
n = sum(!is.na(hotel_id))) %>%
mutate(closed_rate = closed/n)
# quality score
data_fr %>%
group_by(quality_score) %>%
summarise(
closed = sum(!is.na(closed_date)),
n = sum(!is.na(hotel_id))) %>%
mutate(closed_rate = closed/n)
